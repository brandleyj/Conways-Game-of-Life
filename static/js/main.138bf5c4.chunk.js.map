{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Rows","Cols","Count","ops","resetGrid","rows","i","push","Array","from","App","useState","grid","setGrid","active","setActive","speed","setSpeed","activeRef","useRef","current","speedRef","activeSim","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","className","style","display","gridTemplateColumns","map","col","key","backgroundColor","undefined","border","width","height","onClick","newGrid","id","Math","random","type","name","onChange","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.138bf5c4.chunk.js","sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\nimport produce from 'immer';\n\nlet Rows = 40;\nlet Cols = 40;\nlet Count = 0;\n\nconst ops = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 0],\n  [-1, 0],\n  [1, 1],\n  [-1, -1]\n]\n\nconst resetGrid = () => {\n  const rows = [];\n    for (let i = 0; i < Rows; i++) {\n      rows.push(Array.from(Array(Cols), () => 0));\n    }\n    Count = 0;\n    return rows;\n}\n\nfunction App() {\n  const [grid, setGrid] = useState(() => {\n    const rows = [];\n    for (let i = 0; i < Rows; i++) {\n      rows.push(Array.from(Array(Cols), () => 0))\n    }\n    return rows\n  });\n\n  const [active, setActive] = useState(false)\n  const [speed, setSpeed] = useState(50)\n\n  const activeRef = useRef(active)\n  activeRef.current = active\n\n  const speedRef = useRef(speed);\n  speedRef.current = speed\n\n  const activeSim = useCallback(() => {\n    if(!activeRef.current) {\n      return;\n    }\n\n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for(let i = 0; i < Rows; i++) {\n          for(let k = 0; k < Cols; k++) {\n            let neighbors = 0;\n            ops.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y\n                if (newI >= 0 && newI < Rows && newK >= 0 && newK < Cols) {\n                  neighbors += g[newI][newK]\n                }\n            })\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1\n            }\n          }\n        }\n      })\n    })\n    setTimeout(activeSim, speedRef.current)\n    Count++\n  }, [])\n\n  const handleChange = event => {\n    setSpeed(event.target.value)\n  }\n  \n  return (\n    <div className=\"Container\">\n      <div style={{\n        display: 'grid',\n        gridTemplateColumns: `repeat(${Cols}, 20px)`\n      }}\n      >\n        {grid.map((rows, i) => rows.map((col, k) => (\n          <div \n          key={`${i}-${k}`}\n          style={{\n            backgroundColor: grid[i][k] ? \"white\" : undefined,\n            border: \"1px solid white\",\n            width: 20,\n            height: 20\n          }}\n          onClick={() => {\n            const newGrid = produce(grid, gridCopy => {\n              gridCopy[i][k] = grid[i][k] ? 0 : 1\n            });\n            setGrid(newGrid)\n          }}\n          >\n          </div>\n        )))}\n      </div>\n      <div className=\"TextField\">\n        <h1>Game of Life</h1>\n        <h2>Rules:</h2>\n        <ol>\n          <li>Any live cell with fewer than two live neighbors dies.</li>\n          <li>Any live cell with two or three live neighbors lives on to the next generation.</li>\n          <li>Any live cell with more than three live neighbors dies.</li>\n          <li>And dead cell with exactly three live neighbors becomes a live cell.</li>\n        </ol>\n        <p>Generations: {Count}</p>\n        <button onClick={() => {\n          setActive(!active)\n          if(!active) {\n            activeRef.current = true;\n            Count = 0;\n            activeSim();\n          }\n        }}\n        id=\"button\"\n        >{active ? 'Stop' : 'Start'}\n        </button>\n        <button onClick={() => {\n          Rows = 40;\n          Cols = 40;\n          setGrid(resetGrid());\n        }}\n        className=\"reset\"\n        id=\"button\"\n        >\n          Reset\n        </button>\n        <button onClick={() => {\n          const rows = [];\n          for (let i = 0; i < Rows; i++) {\n            rows.push(Array.from(Array(Cols), () => Math.random() > .5))\n          }\n          Count = 0;\n          setGrid(rows)\n        }}\n        id=\"button\"\n        >Random</button>\n        <p>Speed: {speed}</p>\n        <input\n          type=\"range\"\n          name='speed'\n          className=\"slider\"\n          onChange={handleChange} \n          value={speed.value}\n        />\n        <p>Rows: {Rows}</p>\n        <button onClick={( ) => {\n        Rows++;\n          setGrid(resetGrid());\n        }}\n        className=\"margin\"\n        id=\"button\"\n        >+</button>\n        <button onClick={( ) => {\n        Rows--;\n          setGrid(resetGrid());\n        }}\n        id=\"button\"\n        >-</button>\n        <p>Columns: {Cols}</p>\n        <button onClick={( ) => {\n        Cols++;\n          setGrid(resetGrid());\n        }}\n        className=\"margin\"\n        id=\"button\"\n        >+</button>\n        <button onClick={( ) => {\n        Cols--;\n          setGrid(resetGrid());\n        }}\n        id=\"button\">-\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}